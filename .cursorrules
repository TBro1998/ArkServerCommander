# ARK 服务器管理器 - Cursor 规则文件

## 项目概述
基于 Nuxt.js + Gin + Gorm 的前后端分离 ARK 服务器管理系统，部署在单一 Docker 镜像中。
- 前端：Nuxt.js 3 + Pinia + Tailwind CSS
- 后端：Gin + Gorm + SQLite + JWT
- 数据库：SQLite
- 认证：JWT + bcrypt
- 部署：Docker 单镜像部署

## 项目结构
```
ArkServerManager/
├── server/          # 后端 Go 代码
│   ├── config/      # 配置
│   ├── controllers/ # 控制器
│   ├── database/    # 数据库
│   ├── middleware/  # 中间件
│   ├── models/      # 数据模型
│   ├── routes/      # 路由
│   └── utils/       # 工具函数
├── web/             # 前端 Nuxt.js 代码
│   ├── layouts/     # 布局
│   ├── middleware/  # 中间件
│   ├── pages/       # 页面
│   └── stores/      # 状态管理
├── Dockerfile       # 单镜像构建
└── docker-compose.yml
```

## 代码规范

### Go 后端规范
- 使用 `gofmt` 格式化代码
- 函数名使用驼峰命名法，公开函数首字母大写
- 错误处理必须显式检查，不能忽略 error
- API 响应格式：成功 `{"message": "成功信息", "data": {}}`，错误 `{"error": "错误信息"}`
- 控制器函数接收 `*gin.Context` 参数
- 数据库模型使用 gorm 标签

### Vue/JavaScript 前端规范
- 使用 Composition API (setup script)
- 组件文件名使用 PascalCase (MyComponent.vue)
- 页面文件名使用 kebab-case (my-page.vue)
- 使用 Pinia 进行状态管理
- Tailwind CSS 进行样式设计
- 使用 Vue 3 响应式 API (ref, reactive, computed)

## 开发约定

### API 设计
- RESTful API 设计原则
- 使用 HTTP 状态码表示请求结果
- 认证使用 Bearer Token 格式
- API 路径使用小写和连字符

### 数据库
- 使用 Gorm 进行数据库操作
- 模型结构体包含标准字段：ID, CreatedAt, UpdatedAt, DeletedAt
- 数据库迁移使用 AutoMigrate
- 敏感数据使用 json:"-" 标签隐藏

### 错误处理
- 后端：统一的错误处理中间件
- 前端：使用 try-catch 处理异步操作
- 用户友好的错误信息显示

### 安全规范
- 密码使用 bcrypt 加密
- JWT token 设置合理的过期时间
- API 接口进行适当的权限验证
- 前端不存储敏感信息

## 代码示例

### Go 控制器示例
```go
func GetUser(c *gin.Context) {
    userID := c.GetUint("user_id")
    
    var user models.User
    if err := database.DB.First(&user, userID).Error; err != nil {
        c.JSON(http.StatusNotFound, gin.H{"error": "用户不存在"})
        return
    }
    
    c.JSON(http.StatusOK, gin.H{
        "data": models.UserResponse{
            ID: user.ID,
            Username: user.Username,
        },
    })
}
```

### Vue 组件示例
```vue
<template>
  <div class="container mx-auto px-4">
    <h1 class="text-2xl font-bold mb-4">{{ title }}</h1>
    <form @submit.prevent="handleSubmit">
      <!-- 表单内容 -->
    </form>
  </div>
</template>

<script setup>
const title = ref('页面标题')

const handleSubmit = async () => {
  try {
    // 处理表单提交
  } catch (error) {
    console.error('提交失败:', error)
  }
}
</script>
```

### Pinia Store 示例
```javascript
export const useExampleStore = defineStore('example', {
  state: () => ({
    items: [],
    isLoading: false
  }),

  actions: {
    async fetchItems() {
      this.isLoading = true
      try {
        const response = await $fetch('/api/items')
        this.items = response.data
      } catch (error) {
        console.error('获取数据失败:', error)
      } finally {
        this.isLoading = false
      }
    }
  }
})
```

## 部署规范
- 使用环境变量管理配置
- 单 Docker 镜像部署，包含前后端
- 健康检查接口
- 日志记录和监控

## Cursor AI 开发限制

### 执行环境限制
- **禁止启动服务进行测试验证**：由于 Cursor 无法在 Windows PowerShell 环境下正常运行和管理后台服务，AI 助手不得使用 `run_terminal_cmd` 工具启动前后端服务
- **禁止的命令包括但不限于**：
  - `go run main.go`
  - `npm run dev` 或 `pnpm dev`
  - `docker-compose up`
  - 任何可能启动长期运行服务的命令

### 替代验证方法
- 通过**静态代码分析**验证逻辑正确性
- 提供**问题排查指南**而不是直接运行测试
- 使用**代码审查**的方式确保修改的正确性

### 推荐的工作流程
1. **分析问题**：通过查看代码、日志、错误信息等方式定位问题
2. **修改代码**：进行必要的代码修改和优化
3. **代码审查**：通过静态分析确保修改的正确性
4. **问题预防**：提供可能遇到的问题和解决方案

### 命令使用原则
- 仅使用**只读性质**的终端命令（如 `cat`、`ls`、`grep` 等）
- 可以使用**静态检查**命令（如 `go build`、`npm install` 等不启动服务的命令）
- **严禁**使用任何可能启动服务或需要用户交互的命令

这些限制确保了在 Cursor 环境下的稳定开发体验，避免因环境不兼容导致的问题。

## Git 提交规范

### Conventional Commits 标准
使用 [Conventional Commits](https://www.conventionalcommits.org/) 规范进行 Git 提交，格式如下：

```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

### 提交类型 (type)
- **feat**: 新功能
- **fix**: 修复 bug
- **docs**: 文档更新
- **style**: 代码格式调整（不影响代码逻辑）
- **refactor**: 代码重构
- **perf**: 性能优化
- **test**: 测试相关
- **chore**: 构建过程或辅助工具的变动
- **ci**: CI/CD 相关变更
- **build**: 构建系统或外部依赖变更

### 作用域 (scope)
可选，用于说明提交影响的范围：
- **frontend**: 前端相关
- **backend**: 后端相关
- **database**: 数据库相关
- **docker**: Docker 相关
- **auth**: 认证相关
- **api**: API 接口相关

### 提交示例
```
feat(auth): 添加用户登录功能
fix(backend): 修复服务器启动时的端口冲突问题
docs: 更新 README.md 安装说明
style(frontend): 统一按钮组件样式
refactor(api): 重构服务器管理 API 接口
perf(database): 优化数据库查询性能
test(backend): 添加用户认证单元测试
chore: 更新依赖包版本
ci: 配置 GitHub Actions 自动部署
build(docker): 优化 Docker 镜像构建过程
```

### 提交规范要求
- 提交信息使用中文描述
- 类型和作用域使用英文
- 描述简洁明了，不超过 50 个字符
- 如果需要详细说明，在 body 中补充
- 关联 issue 时在 footer 中使用 `Closes #123` 格式

### 分支命名规范
- **feature/**: 新功能分支，如 `feature/user-auth`
- **fix/**: 修复分支，如 `fix/server-startup`
- **hotfix/**: 紧急修复分支，如 `hotfix/critical-bug`
- **docs/**: 文档分支，如 `docs/api-documentation`
- **refactor/**: 重构分支，如 `refactor/database-models`

### 工作流程
1. 从 `main` 分支创建功能分支
2. 在分支上进行开发和测试
3. 提交时遵循 Conventional Commits 规范
4. 创建 Pull Request 进行代码审查
5. 合并到 `main` 分支并删除功能分支 