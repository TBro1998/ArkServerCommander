name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # 前端测试
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ui

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: ui/pnpm-lock.yaml

    - name: Install dependencies
      run: pnpm install

    - name: Build frontend
      run: pnpm build

    - name: Check build output
      run: |
        if [ ! -d ".output" ]; then
          echo "❌ 前端构建失败：.output 目录不存在"
          ls -la
          exit 1
        fi
        echo "📁 构建目录结构："
        ls -la .output/
        if [ -d ".output/public" ]; then
          ls -la .output/public/
        fi
        
        # 检查 SPA 应用的主入口文件
        if [ ! -f ".output/public/index.html" ] && [ ! -f ".output/public/200.html" ]; then
          echo "❌ 前端构建失败：找不到 HTML 入口文件"
          echo "📁 .output 目录内容："
          find .output -name "*.html" -o -name "*.js" | head -10
          exit 1
        fi
        echo "✅ 前端构建成功"

  # 后端测试
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        cache-dependency-path: server/go.sum

    - name: Install dependencies
      run: |
        go mod download
        go mod tidy

    - name: Run go fmt
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "❌ 代码格式不正确，请运行 go fmt"
          gofmt -s -l .
          exit 1
        fi
        echo "✅ 代码格式正确"

    - name: Run go vet
      run: go vet ./...

    - name: Build backend
      run: go build -v ./...

    - name: Run tests
      run: go test -v ./... 